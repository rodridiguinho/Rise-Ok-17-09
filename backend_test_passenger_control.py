#!/usr/bin/env python3
"""
Backend Test Suite for Passenger Control Critical Fixes - REVIEW REQUEST
Tests all critical fixes for passenger control system
"""

import requests
import json
import sys
import os
from datetime import datetime

# Get backend URL from frontend .env file
def get_backend_url():
    try:
        with open('/app/frontend/.env', 'r') as f:
            for line in f:
                if line.startswith('REACT_APP_BACKEND_URL='):
                    return line.split('=', 1)[1].strip()
    except Exception as e:
        print(f"Error reading frontend .env: {e}")
        return None

BASE_URL = get_backend_url()
if not BASE_URL:
    print("‚ùå Could not get backend URL from frontend/.env")
    sys.exit(1)

API_URL = f"{BASE_URL}/api"
print(f"üîó Testing API at: {API_URL}")

# Test credentials from the review request
VALID_EMAIL = "rodrigo@risetravel.com.br"
VALID_PASSWORD = "Emily2030*"

# Global token storage
auth_token = None

def print_test_header(title):
    """Print a formatted test header"""
    print("\n" + "="*80)
    print(f"üß™ {title}")
    print("="*80)

def print_result(success, test_name, details=""):
    """Print a formatted test result"""
    status = "‚úÖ PASS" if success else "‚ùå FAIL"
    print(f"{status} | {test_name}")
    if details:
        print(f"     ‚îî‚îÄ {details}")

def test_critical_passenger_control_fixes():
    """üéØ TESTE CR√çTICO - CORRE√á√ïES NO CONTROLE DE PASSAGEIROS - REVIEW REQUEST"""
    print_test_header("üéØ TESTE CR√çTICO - CORRE√á√ïES NO CONTROLE DE PASSAGEIROS")
    
    # Test credentials from review request
    test_email = "rodrigo@risetravel.com.br"
    test_password = "Emily2030*"
    
    # Test 1: Authenticate first
    global auth_token
    try:
        login_data = {
            "email": test_email,
            "password": test_password
        }
        response = requests.post(f"{API_URL}/auth/login", json=login_data, timeout=10)
        if response.status_code == 200:
            data = response.json()
            auth_token = data.get("access_token")
            print_result(True, "üéØ CONTROLE DE PASSAGEIROS - Authentication", 
                       f"Successfully logged in as {test_email}")
        else:
            print_result(False, f"üéØ CONTROLE DE PASSAGEIROS - Authentication failed - HTTP {response.status_code}", response.text)
            return
    except Exception as e:
        print_result(False, "üéØ CONTROLE DE PASSAGEIROS - Authentication failed", str(e))
        return
    
    # Test 2: Teste de Salvamento de Reserva - Find existing transaction and test PUT update
    print("\nüéØ TEST 1: TESTE DE SALVAMENTO DE RESERVA")
    try:
        # First, get existing transactions
        response = requests.get(f"{API_URL}/transactions", timeout=10)
        if response.status_code == 200:
            transactions = response.json()
            print_result(True, "Salvamento de Reserva - Busca transa√ß√µes existentes", 
                       f"Encontradas {len(transactions)} transa√ß√µes no controle de passageiros")
            
            # Find a suitable transaction for testing (preferably with travel data)
            test_transaction = None
            for transaction in transactions:
                if (transaction.get('type') in ['entrada', 'entrada_vendas'] and 
                    transaction.get('description') and 
                    not transaction.get('autoGenerated', False)):
                    test_transaction = transaction
                    break
            
            if test_transaction:
                transaction_id = test_transaction['id']
                print_result(True, "Salvamento de Reserva - Transa√ß√£o alvo localizada", 
                           f"ID: {transaction_id}, Descri√ß√£o: '{test_transaction.get('description')}', "
                           f"Cliente: '{test_transaction.get('client', 'N/A')}', Valor: R$ {test_transaction.get('amount', 0):,.2f}")
                
                # Test PUT update with passenger control fields
                headers = {"Authorization": f"Bearer {auth_token}"}
                update_data = {
                    "type": test_transaction.get('type', 'entrada'),
                    "category": test_transaction.get('category', 'Passagem A√©rea'),
                    "description": test_transaction.get('description', 'Teste atualiza√ß√£o'),
                    "amount": test_transaction.get('amount', 1000.00),
                    "paymentMethod": test_transaction.get('paymentMethod', 'PIX'),
                    # Passenger control specific fields
                    "tripType": "ida-volta",
                    "departureDate": "2025-12-29",
                    "returnDate": "2026-01-19",
                    "passengers": [],
                    "supplier": "",
                    "airline": "",
                    "travelNotes": "",
                    "emissionType": "E-ticket",
                    "supplierPhone": "",
                    "reservationNumber": "",
                    "productType": "",
                    "clientReservationCode": "",
                    "departureCity": "",
                    "arrivalCity": ""
                }
                
                response = requests.put(f"{API_URL}/transactions/{transaction_id}", 
                                      json=update_data, headers=headers, timeout=10)
                
                print(f"PUT Response Status: {response.status_code}")
                print(f"PUT Response Text: {response.text}")
                
                if response.status_code == 200:
                    updated_data = response.json()
                    print_result(True, "‚úÖ Salvamento de Reserva - PUT /api/transactions/{id} SUCCESS", 
                               f"Atualiza√ß√£o via PUT executada com sucesso (HTTP 200)")
                    
                    # Verify required fields are accepted
                    required_fields = ["tripType", "departureDate", "returnDate", "emissionType"]
                    fields_accepted = True
                    for field in required_fields:
                        if updated_data.get(field) == update_data.get(field):
                            print_result(True, f"Salvamento de Reserva - Campo {field} aceito", 
                                       f"Campo {field} salvo corretamente: {updated_data.get(field)}")
                        else:
                            print_result(False, f"Salvamento de Reserva - Campo {field} rejeitado", 
                                       f"Esperado: {update_data.get(field)}, Obtido: {updated_data.get(field)}")
                            fields_accepted = False
                    
                    if fields_accepted:
                        print_result(True, "‚úÖ Salvamento de Reserva - CAMPOS OBRIGAT√ìRIOS ACEITOS", 
                                   "Todos os campos obrigat√≥rios est√£o sendo aceitos corretamente")
                        print_result(True, "‚úÖ Salvamento de Reserva - SEM ERRO HTTP 422", 
                                   "Confirmado que n√£o h√° mais erro HTTP 422")
                    else:
                        print_result(False, "‚ùå Salvamento de Reserva - ALGUNS CAMPOS REJEITADOS", 
                                   "Alguns campos obrigat√≥rios n√£o foram aceitos")
                        
                elif response.status_code == 422:
                    print_result(False, "‚ùå Salvamento de Reserva - ERRO HTTP 422 AINDA PRESENTE", 
                               f"Erro HTTP 422 ainda ocorre: {response.text}")
                else:
                    print_result(False, f"‚ùå Salvamento de Reserva - ERRO HTTP {response.status_code}", 
                               f"Erro inesperado: {response.text}")
            else:
                print_result(False, "Salvamento de Reserva - Nenhuma transa√ß√£o adequada encontrada", 
                           "N√£o foi poss√≠vel encontrar uma transa√ß√£o adequada para teste")
        else:
            print_result(False, f"Salvamento de Reserva - Erro ao buscar transa√ß√µes - HTTP {response.status_code}", response.text)
    except Exception as e:
        print_result(False, "Salvamento de Reserva - Exception", str(e))
    
    # Test 3: Teste de Dados de Aeroportos - Verify Cascavel and new cities
    print("\nüéØ TEST 2: TESTE DE DADOS DE AEROPORTOS")
    try:
        # Create a test transaction with Cascavel to verify it's available
        cascavel_transaction = {
            "type": "entrada_vendas",
            "category": "Passagem A√©rea",
            "description": "Teste Cascavel - Dados de Aeroportos",
            "amount": 800.00,
            "paymentMethod": "PIX",
            "departureCity": "Cascavel",
            "arrivalCity": "S√£o Paulo",
            "departureDate": "2025-02-15",
            "client": "Cliente Teste Cascavel"
        }
        
        response = requests.post(f"{API_URL}/transactions", json=cascavel_transaction, timeout=10)
        if response.status_code == 200:
            data = response.json()
            if data.get('departureCity') == 'Cascavel':
                print_result(True, "‚úÖ Dados de Aeroportos - CASCAVEL DISPON√çVEL", 
                           f"Cascavel est√° dispon√≠vel nos dados de cidades e foi salvo corretamente")
                
                # Test other new Brazilian cities
                new_cities = ["Ponta Grossa", "Imperatriz", "Juazeiro do Norte", "Petrolina", 
                            "Dourados", "Corumb√°", "Rondon√≥polis", "Alta Floresta"]
                
                cities_working = 0
                for city in new_cities:
                    city_transaction = {
                        "type": "entrada_vendas",
                        "category": "Passagem A√©rea", 
                        "description": f"Teste {city} - Nova Cidade",
                        "amount": 600.00,
                        "paymentMethod": "PIX",
                        "departureCity": city,
                        "arrivalCity": "S√£o Paulo",
                        "departureDate": "2025-02-20"
                    }
                    
                    city_response = requests.post(f"{API_URL}/transactions", json=city_transaction, timeout=10)
                    if city_response.status_code == 200:
                        city_data = city_response.json()
                        if city_data.get('departureCity') == city:
                            cities_working += 1
                            print_result(True, f"Dados de Aeroportos - {city} funcionando", 
                                       f"Cidade {city} salva corretamente")
                        else:
                            print_result(False, f"Dados de Aeroportos - {city} n√£o salva", 
                                       f"Cidade {city} n√£o foi salva corretamente")
                    else:
                        print_result(False, f"Dados de Aeroportos - {city} erro", 
                                   f"Erro ao testar cidade {city}: HTTP {city_response.status_code}")
                
                if cities_working >= 8:  # At least 8 out of 8 new cities working
                    print_result(True, "‚úÖ Dados de Aeroportos - TODAS AS NOVAS CIDADES FUNCIONANDO", 
                               f"Confirmado que todas as {cities_working} novas cidades brasileiras est√£o funcionando")
                else:
                    print_result(False, f"‚ùå Dados de Aeroportos - ALGUMAS CIDADES N√ÉO FUNCIONAM", 
                               f"Apenas {cities_working} de 8 novas cidades est√£o funcionando")
                    
            else:
                print_result(False, "‚ùå Dados de Aeroportos - CASCAVEL N√ÉO DISPON√çVEL", 
                           f"Cascavel n√£o est√° dispon√≠vel. Valor salvo: {data.get('departureCity')}")
        else:
            print_result(False, f"‚ùå Dados de Aeroportos - ERRO AO TESTAR CASCAVEL - HTTP {response.status_code}", response.text)
    except Exception as e:
        print_result(False, "Dados de Aeroportos - Exception", str(e))
    
    # Test 4: Teste de Transa√ß√µes IDA vs IDA-VOLTA
    print("\nüéØ TEST 3: TESTE DE TRANSA√á√ïES IDA vs IDA-VOLTA")
    try:
        # Test 4a: Create entrada_vendas with only departureDate (IDA only)
        ida_only_transaction = {
            "type": "entrada_vendas",
            "category": "Passagem A√©rea",
            "description": "Teste IDA apenas - Controle Passageiros",
            "amount": 1200.00,
            "paymentMethod": "PIX",
            "departureDate": "2025-03-15",
            "tripType": "ida",
            "departureCity": "S√£o Paulo",
            "arrivalCity": "Rio de Janeiro",
            "client": "Cliente Teste IDA"
        }
        
        response = requests.post(f"{API_URL}/transactions", json=ida_only_transaction, timeout=10)
        if response.status_code == 200:
            ida_data = response.json()
            ida_transaction_id = ida_data.get('id')
            
            # Verify IDA transaction data
            if (ida_data.get('departureDate') == '2025-03-15' and 
                ida_data.get('returnDate') is None and 
                ida_data.get('tripType') == 'ida'):
                print_result(True, "‚úÖ Transa√ß√µes IDA vs IDA-VOLTA - TRANSA√á√ÉO IDA APENAS", 
                           f"Transa√ß√£o entrada_vendas apenas com departureDate criada corretamente (ID: {ida_transaction_id})")
            else:
                print_result(False, "‚ùå Transa√ß√µes IDA vs IDA-VOLTA - ERRO TRANSA√á√ÉO IDA", 
                           f"Dados IDA incorretos: departureDate={ida_data.get('departureDate')}, returnDate={ida_data.get('returnDate')}")
        else:
            print_result(False, f"‚ùå Transa√ß√µes IDA vs IDA-VOLTA - ERRO CRIAR IDA - HTTP {response.status_code}", response.text)
        
        # Test 4b: Create entrada_vendas with departureDate + returnDate + tripType='ida-volta'
        ida_volta_transaction = {
            "type": "entrada_vendas",
            "category": "Passagem A√©rea",
            "description": "Teste IDA-VOLTA - Controle Passageiros",
            "amount": 2400.00,
            "paymentMethod": "PIX",
            "departureDate": "2025-03-20",
            "returnDate": "2025-03-30",
            "tripType": "ida-volta",
            "departureCity": "S√£o Paulo",
            "arrivalCity": "Salvador",
            "client": "Cliente Teste IDA-VOLTA"
        }
        
        response = requests.post(f"{API_URL}/transactions", json=ida_volta_transaction, timeout=10)
        if response.status_code == 200:
            ida_volta_data = response.json()
            ida_volta_transaction_id = ida_volta_data.get('id')
            
            # Verify IDA-VOLTA transaction data
            if (ida_volta_data.get('departureDate') == '2025-03-20' and 
                ida_volta_data.get('returnDate') == '2025-03-30' and 
                ida_volta_data.get('tripType') == 'ida-volta'):
                print_result(True, "‚úÖ Transa√ß√µes IDA vs IDA-VOLTA - TRANSA√á√ÉO IDA-VOLTA", 
                           f"Transa√ß√£o entrada_vendas com departureDate + returnDate + tripType='ida-volta' criada corretamente (ID: {ida_volta_transaction_id})")
                
                # Verify data is saved correctly in database for passenger control
                verify_response = requests.get(f"{API_URL}/transactions", timeout=10)
                if verify_response.status_code == 200:
                    all_transactions = verify_response.json()
                    
                    # Find our IDA-VOLTA transaction
                    found_ida_volta = None
                    for t in all_transactions:
                        if t.get('id') == ida_volta_transaction_id:
                            found_ida_volta = t
                            break
                    
                    if found_ida_volta:
                        if (found_ida_volta.get('departureDate') == '2025-03-20' and 
                            found_ida_volta.get('returnDate') == '2025-03-30' and 
                            found_ida_volta.get('tripType') == 'ida-volta'):
                            print_result(True, "‚úÖ Transa√ß√µes IDA vs IDA-VOLTA - DADOS SALVOS CORRETAMENTE", 
                                       "Dados s√£o salvos corretamente no banco para controle de passageiros")
                        else:
                            print_result(False, "‚ùå Transa√ß√µes IDA vs IDA-VOLTA - DADOS INCORRETOS NO BANCO", 
                                       f"Dados incorretos no banco: {found_ida_volta}")
                    else:
                        print_result(False, "‚ùå Transa√ß√µes IDA vs IDA-VOLTA - TRANSA√á√ÉO N√ÉO ENCONTRADA NO BANCO", 
                                   "Transa√ß√£o IDA-VOLTA n√£o encontrada no banco")
                else:
                    print_result(False, f"‚ùå Transa√ß√µes IDA vs IDA-VOLTA - ERRO VERIFICAR BANCO - HTTP {verify_response.status_code}", verify_response.text)
            else:
                print_result(False, "‚ùå Transa√ß√µes IDA vs IDA-VOLTA - ERRO TRANSA√á√ÉO IDA-VOLTA", 
                           f"Dados IDA-VOLTA incorretos: departureDate={ida_volta_data.get('departureDate')}, returnDate={ida_volta_data.get('returnDate')}, tripType={ida_volta_data.get('tripType')}")
        else:
            print_result(False, f"‚ùå Transa√ß√µes IDA vs IDA-VOLTA - ERRO CRIAR IDA-VOLTA - HTTP {response.status_code}", response.text)
            
    except Exception as e:
        print_result(False, "Transa√ß√µes IDA vs IDA-VOLTA - Exception", str(e))
    
    # Test 5: Endpoint de Hide from Passenger Control
    print("\nüéØ TEST 4: ENDPOINT DE HIDE FROM PASSENGER CONTROL")
    try:
        # First create a test transaction to hide
        hide_test_transaction = {
            "type": "entrada_vendas",
            "category": "Passagem A√©rea",
            "description": "Teste Hide from Passenger Control",
            "amount": 1500.00,
            "paymentMethod": "PIX",
            "client": "Cliente Teste Hide"
        }
        
        response = requests.post(f"{API_URL}/transactions", json=hide_test_transaction, timeout=10)
        if response.status_code == 200:
            hide_data = response.json()
            hide_transaction_id = hide_data.get('id')
            
            # Verify transaction is initially visible (hiddenFromPassengerControl should be false or not set)
            initial_hidden_status = hide_data.get('hiddenFromPassengerControl', False)
            print_result(True, "Hide from Passenger Control - Transa√ß√£o criada", 
                       f"Transa√ß√£o criada (ID: {hide_transaction_id}), Status inicial oculto: {initial_hidden_status}")
            
            # Test PATCH endpoint to hide from passenger control
            headers = {"Authorization": f"Bearer {auth_token}"}
            patch_response = requests.patch(f"{API_URL}/transactions/{hide_transaction_id}/hide-from-passenger-control", 
                                          headers=headers, timeout=10)
            
            print(f"PATCH Response Status: {patch_response.status_code}")
            print(f"PATCH Response Text: {patch_response.text}")
            
            if patch_response.status_code == 200:
                patch_data = patch_response.json()
                print_result(True, "‚úÖ Hide from Passenger Control - PATCH ENDPOINT FUNCIONA", 
                           f"PATCH /api/transactions/{hide_transaction_id}/hide-from-passenger-control executado com sucesso")
                
                # Verify the transaction is now hidden
                verify_response = requests.get(f"{API_URL}/transactions", timeout=10)
                if verify_response.status_code == 200:
                    all_transactions = verify_response.json()
                    
                    # Find our hidden transaction
                    found_hidden = None
                    for t in all_transactions:
                        if t.get('id') == hide_transaction_id:
                            found_hidden = t
                            break
                    
                    if found_hidden:
                        hidden_status = found_hidden.get('hiddenFromPassengerControl', False)
                        if hidden_status == True:
                            print_result(True, "‚úÖ Hide from Passenger Control - MARCA HIDDEN TRUE", 
                                       f"Transa√ß√£o marcada corretamente com hiddenFromPassengerControl: true")
                            
                            # Verify main sale data is not affected
                            if (found_hidden.get('description') == 'Teste Hide from Passenger Control' and 
                                found_hidden.get('amount') == 1500.00 and 
                                found_hidden.get('type') == 'entrada_vendas'):
                                print_result(True, "‚úÖ Hide from Passenger Control - VENDA PRINCIPAL N√ÉO AFETADA", 
                                           "Confirma que n√£o afeta a venda principal - todos os dados principais mantidos")
                            else:
                                print_result(False, "‚ùå Hide from Passenger Control - VENDA PRINCIPAL AFETADA", 
                                           f"Dados principais alterados: {found_hidden}")
                        else:
                            print_result(False, "‚ùå Hide from Passenger Control - N√ÉO MARCA HIDDEN TRUE", 
                                       f"hiddenFromPassengerControl n√£o foi marcado como true: {hidden_status}")
                    else:
                        print_result(False, "‚ùå Hide from Passenger Control - TRANSA√á√ÉO N√ÉO ENCONTRADA", 
                                   "Transa√ß√£o n√£o encontrada ap√≥s PATCH")
                else:
                    print_result(False, f"‚ùå Hide from Passenger Control - ERRO VERIFICAR - HTTP {verify_response.status_code}", verify_response.text)
            else:
                print_result(False, f"‚ùå Hide from Passenger Control - PATCH FALHOU - HTTP {patch_response.status_code}", patch_response.text)
        else:
            print_result(False, f"‚ùå Hide from Passenger Control - ERRO CRIAR TRANSA√á√ÉO - HTTP {response.status_code}", response.text)
            
    except Exception as e:
        print_result(False, "Hide from Passenger Control - Exception", str(e))
    
    # Final summary
    print("\nüéØ RESUMO FINAL - CORRE√á√ïES NO CONTROLE DE PASSAGEIROS")
    print_result(True, "üéØ TESTE CR√çTICO CONCLU√çDO", 
               "Todos os testes cr√≠ticos das corre√ß√µes no controle de passageiros foram executados")

if __name__ == "__main__":
    print("üöÄ Starting Backend API Tests - Passenger Control Critical Fixes")
    print(f"üìç Backend URL: {BASE_URL}")
    print(f"üîó API URL: {API_URL}")
    print(f"üë§ Test User: {VALID_EMAIL}")
    print("="*80)
    
    # Run the critical passenger control tests as requested in review
    test_critical_passenger_control_fixes()
    
    print("\n" + "="*80)
    print("üèÅ Backend API Tests Completed")
    print("="*80)